name: Terraform Actions

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (semver, e.g., v1.0.0)'
        required: true
        type: string
      action:
        description: 'Action type'
        required: true
        type: choice
        options:
          - terraform
      terraform_versions:
        description: 'Terraform versions to build (JSON array, e.g., ["1.5.7","1.6.0","1.6.1"])'
        required: false
        default: '["1.5.7","1.6.0","1.6.1"]'
        type: string

jobs:
  download-release:
    runs-on: ubuntu-latest
    outputs:
      release_dir: ${{ steps.download-artifacts.outputs.release_dir }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Release Assets
        id: download-artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ github.event.inputs.release_version }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: version
            });
            const assets = release.data.assets;
            if (!assets || assets.length === 0) {
              throw new Error(`No assets found for release ${version}`);
            }

            const downloadDir = `${process.env.GITHUB_WORKSPACE}/release-artifacts`;
            const fs = require('fs');
            const path = require('path');
            const https = require('https');
            const mkdirp = require('mkdirp');
            mkdirp.sync(downloadDir);
            
            for (const asset of assets) {
              const url = asset.browser_download_url;
              const filePath = path.join(downloadDir, asset.name);
              const file = fs.createWriteStream(filePath);
              await new Promise((resolve, reject) => {
                https.get(url, (resp) => {
                  if (resp.statusCode !== 200) {
                    reject(`Failed to download ${asset.name}: ${resp.statusCode}`);
                  }
                  resp.pipe(file);
                  file.on('finish', () => {
                    file.close(resolve);
                  });
                }).on('error', (err) => {
                  fs.unlink(filePath, () => reject(err.message));
                });
              });
            }
            core.setOutput('release_dir', downloadDir)

      - name: Upload Release Artifacts as Workflow Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: release-artifacts

  build-and-push-1_5_7:
    needs: download-release
    uses: Mad-Pixels/github-workflows/.github/workflows/dockerhub-push.yml@dev
    with:
      dockerfile: images/Dockerfile.${{ github.event.inputs.action }}-action
      repository: "terraform-actions"
      tag: 1.5.7
      build_args: '{"TERRAFORM_VERSION": "1.5.7"}'
      platforms: "linux/amd64,linux/arm64"
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  build-and-push-1_6_0:
    needs: download-release
    uses: Mad-Pixels/github-workflows/.github/workflows/dockerhub-push.yml@dev
    with:
      dockerfile: images/Dockerfile.${{ github.event.inputs.action }}-action
      repository: "terraform-actions"
      tag: 1.6.0
      build_args: '{"TERRAFORM_VERSION": "1.6.0"}'
      platforms: "linux/amd64,linux/arm64"
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  build-and-push-1_6_1:
    needs: download-release
    uses: Mad-Pixels/github-workflows/.github/workflows/dockerhub-push.yml@dev
    with:
      dockerfile: images/Dockerfile.${{ github.event.inputs.action }}-action
      repository: "terraform-actions"
      tag: 1.6.1
      build_args: '{"TERRAFORM_VERSION": "1.6.1"}'
      platforms: "linux/amd64,linux/arm64"
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
